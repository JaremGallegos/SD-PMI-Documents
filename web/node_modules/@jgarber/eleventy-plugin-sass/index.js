import { Buffer } from "node:buffer";
import path from "node:path";

import * as sass from "sass";

import pkg from "./package.json" with { type: "json" };

const compiler = sass.initCompiler();

export default function eleventyPluginSass(eleventyConfig, options = {}) {
  eleventyConfig.versionCheck(pkg["11ty"].compatibility);

  if (typeof options === "function") {
    options = (options)(sass);
  }

  let { sassOptions = {}, templateFormats = ["sass", "scss"] } = options;

  sassOptions = Object.assign({
    loadPaths: ["node_modules"],
  }, sassOptions);

  if (sassOptions.sourceMap) {
    sassOptions.sourceMapIncludeSources = true;
  }

  eleventyConfig.addTemplateFormats(templateFormats);

  eleventyConfig.addExtension(templateFormats, {
    outputFileExtension: "css",

    useLayouts: false,

    compileOptions: {
      permalink: (inputContent, inputPath) => () => {
        if (path.parse(inputPath).name.startsWith("_")) {
          return false;
        }
      },
    },

    compile: function(inputContent, inputPath) {
      sassOptions.loadPaths.unshift(path.parse(inputPath).dir || ".");

      const { css, loadedUrls, sourceMap } = compiler.compileString(inputContent, sassOptions);

      sassOptions.loadPaths.shift();

      const deps = loadedUrls.filter(url => url.protocol === "file:").map(url => path.relative(".", url.pathname));

      this.addDependencies(inputPath, deps);

      return () => {
        if (sourceMap === undefined) {
          return css;
        }

        const sourceMapData = Buffer.from(JSON.stringify(sourceMap)).toString("base64");

        return `${css}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,${sourceMapData} */`;
      };
    },
  });
}
